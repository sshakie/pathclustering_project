// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const courierColors = ['#ff4d4d', '#4dd2ff', '#85e085', '#ffcc66', '#cc99ff', '#9966cc', '#ff9966'];
let clusteringSuccess = false;
let currentEditingOrder = null;
let currentSelectedCourierId = null;

// === DOM —ç–ª–µ–º–µ–Ω—Ç—ã ===
const tabMap = document.getElementById("tab-map");
const tabCouriers = document.getElementById("tab-couriers");
const addressWrapper = document.getElementById("address-search-wrapper");
const mapWrapper = document.getElementById("map-wrapper");
const couriers = document.getElementById("couriers");
const exportbtn = document.getElementById("exportbtn");
const clusteringbtn = document.getElementById("clusteringbtn");

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function getCSRFToken() {
    const meta = document.querySelector('meta[name="csrf-token"]');
    return meta ? meta.content : '';
}

function highlightOrder(id) {
    document.querySelectorAll('.order-item').forEach(el => {
        el.classList.toggle('active', el.dataset.id == id);
    });
}

function copyInviteLink() {
    const input = document.getElementById('inviteLinkInput');
    input.select();
    document.execCommand('copy');

    const btn = document.querySelector('.invite-btn');
    btn.classList.add('copied');
    setTimeout(() => btn.classList.remove('copied'), 1000);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
document.querySelector('.invite-btn')?.addEventListener('click', copyInviteLink);

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏ ===
function activateTab(tab) {
    document.querySelectorAll(".tab").forEach(t => t.classList.remove("active"));
    tab.classList.add("active");
}

function switchToCouriersTab() {
    activateTab(tabCouriers);
    addressWrapper.classList.add("hidden");
    mapWrapper.classList.add("hidden");
    couriers.classList.remove("hidden");
    exportbtn.classList.add("hidden");
    clusteringbtn.classList.add("hidden");
    document.querySelectorAll('.import-btn, .imp-title').forEach(el => el.classList.add("hidden"));
}

tabMap.addEventListener("click", () => {
    activateTab(tabMap);
    addressWrapper.classList.remove("hidden");
    mapWrapper.classList.remove("hidden");
    couriers.classList.add("hidden");
    exportbtn.classList.remove("hidden");
    clusteringbtn.classList.remove("hidden");
    document.querySelector('.import-btn')?.classList.remove("hidden");
});

tabCouriers.addEventListener("click", switchToCouriersTab);

// === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–π ===
function addWarehouseToMap(map, coords) {
    const warehousePlacemark = new ymaps.Placemark(
        coords,
        {
            hintContent: '–°–∫–ª–∞–¥',
            balloonContent: '–°–∫–ª–∞–¥. –û—Ç—Å—é–¥–∞ –±—É–¥—É—Ç –∑–∞–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã.'
        },
        {
            preset: 'islands#blackDeliveryCircleIcon',
            iconColor: '#000000'
        }
    );
    map.geoObjects.add(warehousePlacemark);
    return warehousePlacemark;
}

function searchAddress(map, address) {
    if (!address.trim()) return;

    ymaps.geocode(address).then(result => {
        const firstGeoObject = result.geoObjects.get(0);
        if (firstGeoObject) {
            const coords = firstGeoObject.geometry.getCoordinates();
            const name = firstGeoObject.getAddressLine();
            map.setCenter(coords, 16);
            map.balloon.open(coords, name, { closeButton: true });
        } else {
            alert("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    });
}

// === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ ===
function createOrderItem(order, courierId, color) {
    const orderNumber = order.analytics_id ? order.analytics_id : order.id;
    const item = document.createElement('div');

    item.className = courierId === 'no_courier' ? 'order-item unassigned' : 'order-item';
    item.dataset.id = order.id;
    item.dataset.courier = courierId;

    item.innerHTML = `
        <div class="order-header">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="font-weight: bold;">‚Ññ ${orderNumber}</div>
                <div style="display: flex; align-items: center;">
                    <button class="delete-order-btn hidden" style="height: 24px; display: flex; align-items: center; justify-content: center; margin-right: 10px;">üóëÔ∏è</button>
                    <button class="edit-btn" style="height: 24px; display: flex; align-items: center; justify-content: center;">‚úèÔ∏è</button>
                </div>
            </div>
            <div class="order-address">${order.address}</div>
        </div>
        <div class="order-details hidden">
            <div><b>–ò–º—è:</b> ${order.name || '‚Äî'}</div>
            <div><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone || '‚Äî'}</div>
            <div><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${order.comment || '‚Äî'}</div>
        </div>
        <div class="order-price" style="color: orangered; font-weight: 700; text-align: right;">${order.price} —Ä—É–±.</div>
    `;

    return item;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
function createNewOrderItem() {
    const item = document.createElement('div');
    item.className = 'order-item new-order';
    item.innerHTML = `
        <div class="order-header">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="font-weight: bold;">–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</div>
                <div style="display: flex; align-items: center;">
                    <button class="cancel-new-order-btn" style="height: 24px; display: flex; align-items: center; justify-content: center; margin-right: 5px;">‚úñ</button>
                    <button class="save-new-order-btn" style="height: 24px; display: flex; align-items: center; justify-content: center;">‚úÖ</button>
                </div>
            </div>
            <div class="order-address"><input type="text" placeholder="–ê–¥—Ä–µ—Å" class="new-order-input" style="width: 100%;"></div>
        </div>
        <div class="order-details">
            <div><b>–ò–º—è:</b> <input type="text" placeholder="–ò–º—è" class="new-order-input" style="width: 70%;"></div>
            <div><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <input type="text" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" class="new-order-input" style="width: 70%;"></div>
            <div><b>ID –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:</b> <input type="text" placeholder="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" class="new-order-input" style="width: 70%;"></div>
            <div><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <input type="text" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" class="new-order-input" style="width: 70%;"></div>
        </div>
        <div class="order-price" style="display: flex; justify-content: flex-end; align-items: center;">
            <input type="number" placeholder="–¶–µ–Ω–∞" class="new-order-input" style="width: 30%; text-align: right;"> —Ä—É–±.
        </div>
    `;
    return item;
}

function createOrderMarker(map, order, courierId, color) {
    if (courierId === 'no_courier') {
        const mark = new ymaps.Placemark(order.coords, {
            balloonContent: order.address,
            hintContent: '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        }, {
            preset: 'islands#circleIcon',
            iconColor: '#808080',
            balloonAutoPan: false,
            hideIconOnBalloonOpen: false
        });
        mark.properties.set('courierId', courierId);
        map.geoObjects.add(mark);
        return mark;
    }

    const glowSvg = `
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
            <defs>
                <radialGradient id="glow" cx="50%" cy="50%" r="50%">
                    <stop offset="0%" stop-color="${color}" stop-opacity="0.4" />
                    <stop offset="100%" stop-color="${color}" stop-opacity="0" />
                </radialGradient>
            </defs>
            <!-- –°–≤–µ—á–µ–Ω–∏–µ -->
            <circle cx="50" cy="50" r="40" fill="url(#glow)" />
            <!-- –ù–∞—Ä—É–∂–Ω—ã–π —Ü–≤–µ—Ç–Ω–æ–π –∫—Ä—É–≥ —Å –±–µ–ª–æ–π —Å–µ—Ä–µ–¥–∏–Ω–æ–π -->
            <circle cx="50" cy="50" r="10" fill="white" stroke="${color}" stroke-width="4"/>
        </svg>
    `;

    const encodedSvg = 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(glowSvg);
    const mark = new ymaps.Placemark(order.coords, {
        balloonContent: order.address,
        hintContent: courierData[courierId]?.name || courierId
    }, {
        iconLayout: 'default#image',
        iconImageHref: encodedSvg,
        iconImageSize: [100, 100],
        iconImageOffset: [-50, -50],
        balloonAutoPan: false,
        hideIconOnBalloonOpen: false
    });

    mark.properties.set('courierId', courierId);
    map.geoObjects.add(mark);
    return mark;
}


// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ===
function setupOrderClickHandler(item, order, mark, map) {
    item.addEventListener('click', (e) => {
        const editBtn = item.querySelector('.edit-btn');
        const deleteBtn = item.querySelector('.delete-order-btn');

        if (e.target === editBtn || e.target === deleteBtn || editBtn.textContent === '‚úÖ' || currentEditingOrder) {
            return;
        }

        document.querySelectorAll('.order-details:not(.hidden)').forEach(openDetails => {
            if (openDetails !== item.querySelector('.order-details')) {
                const parentItem = openDetails.closest('.order-item');
                if (parentItem) {
                    openDetails.classList.add('hidden');
                    parentItem.querySelector('.edit-btn').style.display = 'flex';
                    parentItem.querySelector('.delete-order-btn').classList.add('hidden');
                }
            }
        });

        const details = item.querySelector('.order-details');
        const wasHidden = details.classList.contains('hidden');
        details.classList.toggle('hidden');

        editBtn.style.display = 'flex';
        deleteBtn.classList.toggle('hidden', !wasHidden);

        if (wasHidden) {
            map.setCenter(order.coords);
            mark.balloon.open();
            highlightOrder(order.id);
        }
    });
}

function setupMarkerClickHandler(item, order, mark) {
    mark.events.add('click', () => {
        if (!currentEditingOrder) {
            item.click();
        }
    });
}

function setupEditButtonHandler(item, order, mark, map) {
    const editBtn = item.querySelector('.edit-btn');
    const deleteBtn = item.querySelector('.delete-order-btn');
    const details = item.querySelector('.order-details');
    const addressEl = item.querySelector('.order-address');
    const priceEl = item.querySelector('.order-price');
    const filterBlock = document.getElementById('courier-filter-buttons');
    let originalFilterButtons = null;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é currentSelectedCourierId
    currentSelectedCourierId = order.who_delivers;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
    function showAllCouriers() {
        originalFilterButtons = Array.from(filterBlock.children).map(btn => btn.cloneNode(true));
        filterBlock.innerHTML = '';

        // –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
        if (order.who_delivers && order.who_delivers !== -1) {
            const removeBtn = document.createElement('button');
            removeBtn.className = 'courier-btn remove-assignment';
            removeBtn.innerHTML = `
                <span style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                    <span>–°–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ</span>
                    <span class="order-btn-add-to-courier">${currentSelectedCourierId === -1 ? '‚úì' : '+'}</span>
                </span>
            `;

            removeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                currentSelectedCourierId = -1;
                updateCourierButtons();
                removeBtn.querySelector('.order-btn-add-to-courier').textContent = '‚úì';
                removeBtn.classList.add('selected');
            });

            filterBlock.appendChild(removeBtn);
        }

        // –ö–Ω–æ–ø–∫–∞ "–í—Å–µ"
        const allBtn = document.createElement('button');
        allBtn.className = 'courier-btn active';
        allBtn.textContent = '–í—Å–µ';
        allBtn.dataset.courier = 'all';
        allBtn.addEventListener('click', () => {
            document.querySelectorAll('.courier-btn').forEach(b => b.classList.remove('active', 'selected'));
            allBtn.classList.add('active');
        });
        filterBlock.appendChild(allBtn);

        // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        function updateCourierButtons() {
            document.querySelectorAll('.courier-btn[data-courier]').forEach(btn => {
                if (btn.dataset.courier === 'all') return;

                const isSelected = parseInt(btn.dataset.courier) === currentSelectedCourierId;
                btn.classList.toggle('selected', isSelected);
                const actionBtn = btn.querySelector('.order-btn-add-to-courier');
                if (actionBtn) {
                    actionBtn.textContent = isSelected ? '‚úì' : '+';
                }
            });
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
        Object.entries(courierData).forEach(([courierId, data]) => {
            const btn = document.createElement('button');
            btn.className = 'courier-btn';
            btn.dataset.courier = courierId;
            btn.classList.add('editing');

            const isCurrent = parseInt(courierId) === currentSelectedCourierId;
            if (isCurrent) {
                btn.classList.add('selected');
            }

            btn.innerHTML = `
                <span style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                    <span>${data.name || `–ö—É—Ä—å–µ—Ä ${courierId}`}</span>
                    <span class="order-btn-add-to-courier">${isCurrent ? '‚úì' : '+'}</span>
                </span>
            `;

            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                if (parseInt(courierId) === order.who_delivers) return;

                currentSelectedCourierId = parseInt(courierId);
                updateCourierButtons();

                const removeBtn = document.querySelector('.remove-assignment');
                if (removeBtn) {
                    removeBtn.classList.remove('selected');
                    removeBtn.querySelector('.order-btn-add-to-courier').textContent = '+';
                }
            });

            filterBlock.appendChild(btn);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    function restoreFilterButtons() {
        if (originalFilterButtons) {
            filterBlock.innerHTML = '';
            originalFilterButtons.forEach(btn => {
                const newBtn = btn.cloneNode(true);
                filterBlock.appendChild(newBtn);
                if (newBtn.dataset.courier === 'all') {
                    newBtn.addEventListener('click', () => {
                        document.querySelectorAll('.courier-btn').forEach(b => b.classList.remove('active'));
                        newBtn.classList.add('active');
                        setActiveCourier('all');
                    });
                } else {
                    newBtn.addEventListener('click', () => {
                        document.querySelectorAll('.courier-btn').forEach(b => b.classList.remove('active'));
                        newBtn.classList.add('active');
                        setActiveCourier(newBtn.dataset.courier);
                    });
                }
            });
            originalFilterButtons = null;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    function blockOtherOrders(currentItem) {
        document.querySelectorAll('.order-item').forEach(orderItem => {
            if (orderItem !== currentItem) {
                orderItem.classList.add('blocked');
            }
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    function unblockAllOrders() {
        document.querySelectorAll('.order-item').forEach(orderItem => {
            orderItem.classList.remove('blocked');
        });
    }

    let selectedCourierId = order.who_delivers;

    editBtn.addEventListener('click', async (e) => {
        e.stopPropagation();
        const nameEl = details.querySelector('div:nth-child(1)');
        const phoneEl = details.querySelector('div:nth-child(2)');
        const commentEl = details.querySelector('div:nth-child(3)');

        if (editBtn.textContent === '‚úèÔ∏è') {
            // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            currentSelectedCourierId = order.who_delivers;
            document.getElementById('add-order-btn').style.display = 'none';
            currentEditingOrder = order.id;
            editBtn.textContent = '‚úÖ';
            deleteBtn.classList.remove('hidden');
            details.classList.remove('hidden');
            blockOtherOrders(item);
            showAllCouriers();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            const originalValues = {
                name: nameEl.textContent.replace('–ò–º—è:', '').trim(),
                phone: phoneEl.textContent.replace('–¢–µ–ª–µ—Ñ–æ–Ω:', '').trim(),
                comment: commentEl.textContent.replace('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', '').trim(),
                price: priceEl.textContent.replace('—Ä—É–±.', '').trim(),
                address: addressEl.textContent.trim(),
                who_delivers: order.who_delivers
            };

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            nameEl.innerHTML = `<b>–ò–º—è:</b> <input type="text" value="${originalValues.name}" style="border:none; border-bottom: 1px solid #aaa; outline:none; background:none; font-size:14px; width:70%;">`;
            phoneEl.innerHTML = `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <input type="text" value="${originalValues.phone}" style="border:none; border-bottom: 1px solid #aaa; outline:none; background:none; font-size:14px; width:70%;">`;
            commentEl.innerHTML = `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <input type="text" value="${originalValues.comment}" style="border:none; border-bottom: 1px solid #aaa; outline:none; background:none; font-size:14px; width:70%;">`;
            priceEl.innerHTML = `<input type="number" value="${parseInt(originalValues.price)}" style="border:none; border-bottom: 1px solid #aaa; outline:none; background:none; font-weight:700; text-align:right; width:30%;"> —Ä—É–±.`;
            addressEl.innerHTML = `<input type="text" value="${originalValues.address}" style="border:none; border-bottom: 1px solid #aaa; outline:none; background:none; font-size:14px; width:100%;">`;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
            addressEl.dataset.originalAddress = originalValues.address;
        } else {
            document.getElementById('add-order-btn').style.display = 'block';
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const currentValues = {
                name: nameEl.querySelector('input').value,
                phone: phoneEl.querySelector('input').value,
                comment: commentEl.querySelector('input').value,
                price: priceEl.querySelector('input').value,
                address: addressEl.querySelector('input').value
            };

            try {
                const courierChanged = currentSelectedCourierId !== order.who_delivers;
                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const requestData = {
                    name: currentValues.name,
                    phone: currentValues.phone,
                    comment: currentValues.comment,
                    price: parseInt(currentValues.price),
                    address: currentValues.address,
                    who_delivers: courierChanged ? currentSelectedCourierId : order.who_delivers
                };



                const res = await fetch(`/api/orders/${order.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': getCSRFToken()
                    },
                    body: JSON.stringify(requestData),
                });

                if (res.ok) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    order.who_delivers = currentSelectedCourierId;
                    nameEl.innerHTML = `<b>–ò–º—è:</b> ${currentValues.name || '‚Äî'}`;
                    phoneEl.innerHTML = `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${currentValues.phone || '‚Äî'}`;
                    commentEl.innerHTML = `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${currentValues.comment || '‚Äî'}`;
                    priceEl.innerHTML = `${currentValues.price} —Ä—É–±.`;
                    addressEl.innerHTML = currentValues.address;
                    order.who_delivers = currentSelectedCourierId;

                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
                    mark.properties.set('balloonContent', currentValues.address);

                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤
                    restoreFilterButtons();
                    unblockAllOrders();
                    editBtn.textContent = '‚úèÔ∏è';
                    deleteBtn.classList.add('hidden');
                    document.getElementById('add-order-btn').style.display = 'block';
                    currentEditingOrder = null;

                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
                    if (currentValues.address.trim() !== addressEl.dataset.originalAddress?.trim() || courierChanged) {
                        window.location.reload();
                    }
                } else {
                    const error = await res.json();
                    alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
                    restoreFilterButtons();
                    unblockAllOrders();
                }
            } catch (e) {
                console.error(e);
                alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                restoreFilterButtons();
                unblockAllOrders();
            }
        }
    });

    // –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
deleteBtn.addEventListener('click', async (e) => {
    e.stopPropagation();
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
        try {
            const res = await fetch(`/api/orders/${order.id}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json', 'X-CSRFToken': getCSRFToken() }
            });

            if (res.ok) {
                map.geoObjects.remove(mark);
                item.remove();
                document.getElementById('orders-count').textContent = parseInt(document.getElementById('orders-count').textContent) - 1;
                restoreFilterButtons();
                unblockAllOrders();
                window.location.reload();
            } else {
                const error = await res.json();
                alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
                unblockAllOrders();
                window.location.reload();
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
            alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${err.message}`);
            restoreFilterButtons();
            unblockAllOrders();
            window.location.reload();
        }
    }
});
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∏ –∑–∞–∫–∞–∑–æ–≤ ===
function initializeOrders(map, courierOrders, courierData) {
    const ordersList = document.getElementById('orders-list');
    const filterBlock = document.getElementById('courier-filter-buttons');
    const courierSearch = document.getElementById('courier-search');
    let colorIndex = 0;
    const allPlacemarks = [];
    const courierPlacemarks = {};

    function setActiveCourier(id) {
        if (id === 'all') {
            allPlacemarks.forEach(({ mark }) => mark.options.set('visible', true));
        } else {
            allPlacemarks.forEach(({ mark }) => {
                const courierId = mark.properties.get('courierId');
                mark.options.set('visible', courierId === id || courierId === 'no_courier');
            });
        }

        document.querySelectorAll('.order-item').forEach(el => {
            el.style.display = (id === 'all' || el.dataset.courier === id || el.dataset.courier === 'no_courier')
                ? 'block'
                : 'none';
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ –∫—É—Ä—å–µ—Ä–∞
    if (courierOrders['no_courier']) {
        courierOrders['no_courier'].forEach(order => {
            const item = createOrderItem(order, 'no_courier');
            const mark = createOrderMarker(map, order, 'no_courier');

            setupOrderClickHandler(item, order, mark, map);
            setupMarkerClickHandler(item, order, mark);
            setupEditButtonHandler(item, order, mark, map);

            allPlacemarks.push({ mark, order });
            ordersList.prepend(item);
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –∫—É—Ä—å–µ—Ä–∞–º–∏
    for (const [courierId, orders] of Object.entries(courierOrders)) {
        if (courierId === 'no_courier') continue;

        const data = courierData[courierId] || {};
        const color = courierColors[colorIndex++ % courierColors.length];

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
        const btn = document.createElement('button');
        btn.className = 'courier-btn';
        btn.textContent = data.name || courierId;
        btn.dataset.courier = courierId;

        btn.addEventListener('click', () => {
            document.querySelectorAll('.courier-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            setActiveCourier(courierId);
        });

        filterBlock.appendChild(btn);
        courierPlacemarks[courierId] = [];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞
        orders.forEach(order => {
            const item = createOrderItem(order, courierId, color);
            const mark = createOrderMarker(map, order, courierId, color);

            setupOrderClickHandler(item, order, mark, map);
            setupMarkerClickHandler(item, order, mark);
            setupEditButtonHandler(item, order, mark, map);

            courierPlacemarks[courierId].push({ mark, order });
            allPlacemarks.push({ mark, order });
            ordersList.appendChild(item);
        });
    }

    document.getElementById('orders-count').textContent = Object.values(courierOrders).flat().length;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ"
    const allBtn = document.querySelector('.courier-btn.active[data-courier="all"]');
    allBtn.addEventListener('click', () => {
        document.querySelectorAll('.courier-btn').forEach(btn =>
            btn.classList.toggle('active', btn.dataset.courier === 'all')
        );
        setActiveCourier('all');
    });

    // –ü–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–æ–≤
    courierSearch.addEventListener('input', () => {
        const val = courierSearch.value.toLowerCase();
        document.querySelectorAll('.courier-btn').forEach(btn => {
            const name = btn.textContent.toLowerCase();
            btn.style.display = name.includes(val) ? 'block' : 'none';
        });
    });
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã Yandex ===
ymaps.ready(() => {
    const map = new ymaps.Map("map", {
        center: depotCoords,
        zoom: 14,
        controls: [],
        suppressMapOpenBlock: true
    });

    addWarehouseToMap(map, depotCoords);
    initializeOrders(map, courierOrders, courierData);

    // –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤
    const addressInput = document.getElementById('address-search');
    const addressBtn = document.getElementById('address-search-btn');

    addressBtn.addEventListener('click', () => searchAddress(map, addressInput.value));
    addressInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') searchAddress(map, addressInput.value);
    });
});

// === –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ ===
const orderSearch = document.getElementById('order-search');
if (orderSearch) {
    orderSearch.addEventListener('input', () => {
        const query = orderSearch.value.toLowerCase();
        document.querySelectorAll('.order-item').forEach(order => {
            const orderText = order.textContent.toLowerCase();
            order.style.display = orderText.includes(query) ? 'block' : 'none';
        });
    });
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏ ===
document.addEventListener('click', async (e) => {
    const btn = e.target.closest('.clstr-courier');
    if (!btn) return;

    e.preventDefault();
    const courierId = btn.dataset.id;
    const action = btn.dataset.action;
    const projectId = window.location.pathname.split('/')[2];

    try {
        window.location.hash = 'couriers';

        if (action === 'kick') {
            if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞?")) return;

            const res = await fetch(`/api/users/${courierId}`, {
                method: 'DELETE',
                credentials: 'include'
            });

            if (res.ok) {
                window.location.reload(true);
            } else {
                const error = await res.json();
                alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
            }

        } else if (action === 'add' || action === 'remove') {
            const method = action === 'add' ? 'POST' : 'DELETE';
            const res = await fetch('/api/courier_relations', {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCSRFToken()
                },
                credentials: 'include',
                body: JSON.stringify({
                    project_id: parseInt(projectId),
                    courier_id: parseInt(courierId)
                })
            });

            if (res.ok) {
                window.location.reload(true);
            } else {
                const error = await res.json();
                alert(error.message || `–û—à–∏–±–∫–∞ –ø—Ä–∏ ${action === 'add' ? '–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏' : '—É–¥–∞–ª–µ–Ω–∏–∏'}`);
            }
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err);
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + err.message);
    }
});

// === –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è ===
clusteringbtn?.addEventListener("click", async () => {
    const clusteringModal = new bootstrap.Modal(document.getElementById('clusteringModal'));
    const loadingBlock = document.getElementById('clustering-loading');
    const successBlock = document.getElementById('clustering-success');
    const errorBlock = document.getElementById('clustering-error');
    const errorMessage = document.getElementById('clustering-error-message');

    loadingBlock.style.display = 'block';
    successBlock.style.display = 'none';
    errorBlock.style.display = 'none';
    clusteringSuccess = false;
    clusteringModal.show();

    try {
        const response = await fetch(window.location.pathname, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken()
            },
            body: JSON.stringify({ start_clustering: true })
        });

        if (response.ok) {
            loadingBlock.style.display = 'none';
            successBlock.style.display = 'block';
            clusteringSuccess = true;
        } else {
            const error = await response.json();
            loadingBlock.style.display = 'none';
            errorMessage.textContent = error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.";
            errorBlock.style.display = 'block';
        }
    } catch (error) {
        loadingBlock.style.display = 'none';
        errorMessage.textContent = "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.";
        errorBlock.style.display = 'block';
        console.error(error);
    }
});

document.getElementById('clusteringModal')?.addEventListener('hidden.bs.modal', () => {
    if (clusteringSuccess) {
        window.location.reload();
    }
});

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º ===
document.addEventListener('DOMContentLoaded', function() {
    const overlay = document.getElementById('storageModalOverlay');
    if (!overlay) return;

    const input = document.getElementById('storageInput');
    const button = document.getElementById('saveStorageBtn');
    const modal = new bootstrap.Modal(overlay);

    function flashError() {
        input.classList.add('error');
        input.focus();
        setTimeout(() => input.classList.remove('error'), 1000);
    }

    button.addEventListener('click', async function() {
        const address = input.value.trim();
        if (!address) {
            flashError();
            return;
        }

        try {
            const projectId = window.location.pathname.split('/').pop();
            const response = await fetch(`/api/projects/${projectId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCSRFToken()
                },
                body: JSON.stringify({ storage: address })
            });

            if (response.ok) {
                modal.hide();
                window.location.reload();
            } else {
                flashError();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            flashError();
        }
    });
});

// === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ ===
function setupAddOrderButton() {
    const addOrderBtn = document.getElementById('add-order-btn');
    const ordersList = document.getElementById('orders-list');

    if (!addOrderBtn || !ordersList) return;

    addOrderBtn.addEventListener('click', () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if (document.querySelector('.order-item.new-order') || currentEditingOrder) {
            return;
        }

        addOrderBtn.style.display = 'none';

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–∫–∞–∑—ã
        document.querySelectorAll('.order-item').forEach(item => {
            if (!item.classList.contains('new-order')) {
                item.style.pointerEvents = 'none';
                item.style.opacity = '0.7';
            }
        });

        const newOrderItem = createNewOrderItem();
        ordersList.prepend(newOrderItem);

        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
        newOrderItem.querySelector('.new-order-input').focus();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = newOrderItem.querySelector('.save-new-order-btn');
        saveBtn.addEventListener('click', async () => {
        const inputs = newOrderItem.querySelectorAll('.new-order-input');
        const [addressInput, nameInput, phoneInput, analyticsIdInput, commentInput, priceInput] = inputs;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!addressInput.value.trim() || !phoneInput.value.trim() || !nameInput.value.trim() || !priceInput.value.trim()) {
            alert('–ê–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, —Ü–µ–Ω–∞ –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º project_id –∏–∑ URL
        const pathParts = window.location.pathname.split('/');
        const projectId = pathParts[2];

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const orderData = {
            phone: phoneInput.value.trim(),
            name: nameInput.value.trim(),
            address: addressInput.value.trim(),
            project_id: parseInt(projectId),
            price: priceInput.value.trim() ? parseInt(priceInput.value.trim()) : 0,
            comment: commentInput.value.trim() || null,
            analytics_id: analyticsIdInput.value.trim() || null,
            who_delivers: -1
        };

        try {
            const response = await fetch('/api/orders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCSRFToken()
                },
                body: JSON.stringify(orderData)
            });

            if (!response.ok) {
                const error = await response.json();
                alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
                return;
            }

            window.location.reload();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
            alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }

        document.getElementById('add-order-btn').style.display = 'block';
        document.querySelectorAll('.order-item').forEach(item => {
                item.style.pointerEvents = '';
                item.style.opacity = '';
                });
    });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
        const cancelBtn = newOrderItem.querySelector('.cancel-new-order-btn');
                cancelBtn.addEventListener('click', () => {
            newOrderItem.remove();
            document.getElementById('add-order-btn').style.display = 'block';
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
            document.querySelectorAll('.order-item').forEach(item => {
                item.style.pointerEvents = '';
                item.style.opacity = '';
            });
        });
    });
}

document.addEventListener('DOMContentLoaded', function() {
    const importBtn = document.querySelector('.import-btn');
    const impTitle = document.querySelector('.imp-title');
    let hideTimeout;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    importBtn.addEventListener('mouseenter', function() {
        clearTimeout(hideTimeout);
        impTitle.classList.remove('hidden');
    });

    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞
    importBtn.addEventListener('mouseleave', function() {
        hideTimeout = setTimeout(() => {
            impTitle.classList.add('hidden');
        }, 250);
    });

    // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É - –æ—Ç–º–µ–Ω—è–µ–º —Å–∫—Ä—ã—Ç–∏–µ
    impTitle.addEventListener('mouseenter', function() {
        clearTimeout(hideTimeout);
    });

    // –ü—Ä–∏ —É—Ö–æ–¥–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∏ - —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    impTitle.addEventListener('mouseleave', function() {
        hideTimeout = setTimeout(() => {
            impTitle.classList.add('hidden');
        }, 250);
    });
});



// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ===
document.addEventListener('DOMContentLoaded', () => {
    setupAddOrderButton();
    if (window.location.hash === '#couriers') {
        switchToCouriersTab();
        history.replaceState(null, null, ' ');
    }
});


document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const currentPageUrl = window.location.origin + window.location.pathname;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º courierData –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—å–µ—Ä–∞—Ö
    const exportType = document.getElementById('exportType');
    const steps = {
        'initial': document.getElementById('step1'),
        'orders': document.getElementById('step2-orders'),
        'couriers-type': document.getElementById('step2-couriers'),
        'couriers-select': document.getElementById('step3-couriers-select'),
        'couriers-format': document.getElementById('step3-couriers-format'),
        'couriers-export': document.getElementById('step4-couriers')
    };

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
    function resetSteps() {
        for (const key in steps) {
            if (key !== 'initial') {
                steps[key].style.display = 'none';
            }
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –∏–∑ courierData
    function generateCouriersList() {
        const container = document.getElementById('couriersCheckboxList');
        container.innerHTML = '';

        if (!courierData || typeof courierData !== 'object') {
            container.innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—å–µ—Ä–∞—Ö</div>';
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏
        const sortedCouriers = Object.entries(courierData).sort((a, b) => {
            const nameA = a[1].name || '';
            const nameB = b[1].name || '';
            return nameA.localeCompare(nameB);
        });

        // –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        for (const [id, courier] of sortedCouriers) {
            const div = document.createElement('div');
            div.className = 'form-check mb-2';

            const input = document.createElement('input');
            input.className = 'form-check-input courier-checkbox';
            input.type = 'checkbox';
            input.value = id;
            input.id = `courier-${id}`;
            input.dataset.name = courier.name || `–ö—É—Ä—å–µ—Ä ${id}`;

            const label = document.createElement('label');
            label.className = 'form-check-label';
            label.htmlFor = `courier-${id}`;
            label.textContent = courier.name || `–ö—É—Ä—å–µ—Ä ${id}`;

            div.appendChild(input);
            div.appendChild(label);
            container.appendChild(div);
        }

        if (Object.keys(courierData).length === 0) {
            container.innerHTML = '<div class="alert alert-warning">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤</div>';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    exportType.addEventListener('change', function() {
        resetSteps();
        if (this.value === 'orders') {
            steps['orders'].style.display = 'block';
        } else if (this.value === 'couriers') {
            steps['couriers-type'].style.display = 'block';
            generateCouriersList();
        }
    });

    document.getElementById('couriersExportType').addEventListener('change', function() {
        if (this.value === 'selected') {
            steps['couriers-select'].style.display = 'block';
            steps['couriers-format'].style.display = 'none';
            steps['couriers-export'].style.display = 'none';
        } else {
            steps['couriers-select'].style.display = 'none';
            steps['couriers-format'].style.display = 'block';
        }
    });

    document.getElementById('couriersCheckboxList').addEventListener('change', function() {
        const anyChecked = document.querySelectorAll('#couriersCheckboxList input[type="checkbox"]:checked').length > 0;
        steps['couriers-format'].style.display = anyChecked ? 'block' : 'none';
        steps['couriers-export'].style.display = 'none';
    });

    document.getElementById('exportFormat').addEventListener('change', function() {
        steps['couriers-export'].style.display = 'block';
    });

    document.getElementById('exportOrdersBtn').addEventListener('click', function() {
        exportData('orders');
    });

    document.getElementById('exportCouriersBtn').addEventListener('click', function() {
        const exportType = document.getElementById('couriersExportType').value;
        const exportFormat = document.getElementById('exportFormat').value;
        const selectedCouriers = [];

        if (exportType === 'selected') {
    document.querySelectorAll('#couriersCheckboxList input[type="checkbox"]:checked').forEach(checkbox => {
        selectedCouriers.push({
            id: checkbox.value,
            name: checkbox.dataset.name
        });
    });
}

        exportData('couriers', {
            couriersType: exportType,
            format: exportFormat,
            selectedCouriers: selectedCouriers,
            allCouriers: exportType === 'all' ? courierData : null
        });
    });

    // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Ç–µ–∫—É—â–∏–π URL
    function exportData(type, options = {}) {
    fetch(currentPageUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
        },
        body: JSON.stringify({
            action: 'export',
            type: type,
            data: options
        })
    })
    .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.blob().then(blob => {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const disposition = response.headers.get('Content-Disposition');
            let fileName = 'exported_file.xlsx';

            if (disposition && disposition.includes('filename=')) {
                const match = disposition.match(/filename="?([^"]+)"?/);
                if (match && match[1]) {
                    fileName = decodeURIComponent(match[1]);
                }
            }

            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(url);

            bootstrap.Modal.getInstance(document.getElementById('ExportModal')).hide();
        });
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    });
}
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è change –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ input
document.getElementById('hiddenFileInput').addEventListener('change', function(e) {
    if (e.target.files.length > 0) {
        const importModal = new bootstrap.Modal(document.getElementById('importModal'));
        const loadingBlock = document.getElementById('import-loading');
        const successBlock = document.getElementById('import-success');
        const errorBlock = document.getElementById('import-error');
        const errorMessage = document.getElementById('import-error-message');

        loadingBlock.style.display = 'block';
        successBlock.style.display = 'none';
        errorBlock.style.display = 'none';
        importModal.show();

        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(e.target.files[0]);
        document.getElementById('actualFileInput').files = dataTransfer.files;

        const form = document.getElementById('importForm');
        fetch(form.action, {
            method: 'POST',
            body: new FormData(form),
            headers: {
                'Accept': 'application/json'
            }
        })
        .then(async (response) => {
            if (response.status === 204) {
                // –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                loadingBlock.style.display = 'none';
                successBlock.style.display = 'block';

                importModal._element.addEventListener('hidden.bs.modal', () => {
                    window.location.reload();
                });
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Å –æ—à–∏–±–∫–æ–π
                const data = await response.json();
                throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        })
        .catch(error => {
            loadingBlock.style.display = 'none';
            errorMessage.textContent = error.message;
            errorBlock.style.display = 'block';
            console.error('Import error:', error);

            // –°–±—Ä–æ—Å input'–∞
            e.target.value = '';
        });
    }
});


document.getElementById('importForm').addEventListener('submit', function(e) {
    e.preventDefault(); // üö´ –æ—Ç–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
});